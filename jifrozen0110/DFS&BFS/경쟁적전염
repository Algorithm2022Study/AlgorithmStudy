package DFS_BFS;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class practice {
	public static int[] dx={0,1,0,-1};
	public static int[] dy={1,0,-1,0};
	public static int result=0;
	public static int[][] map;
	public static int N,K;
	static class Node implements Comparable<Node>{
		int x;
		int y;
		int value;
		int sec;

		Node(int x,int y,int value,int sec){
			this.x=x;
			this.y=y;
			this.value=value;
			this.sec=sec;
		}
		@Override
		public int compareTo(Node other) {
			if(this.sec==other.sec){
				return this.value-other.value;
			}
			return this.sec-other.sec;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());

		map = new int[N][N];

		PriorityQueue<Node> pq=new PriorityQueue<>();
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j]!=0){
					pq.offer(new Node(i,j,map[i][j],0));
				}
			}
		}

		st = new StringTokenizer(br.readLine());
		int S=Integer.parseInt(st.nextToken());
		int X=Integer.parseInt(st.nextToken());
		int Y=Integer.parseInt(st.nextToken());

		while(!pq.isEmpty()&&pq.peek().sec<S){
			Node node=pq.poll();
			for(int j=0;j<4;j++) {
				int nx = node.x + dx[j];
				int ny = node.y + dy[j];
				if (nx < 0 || ny < 0 || nx >= N || ny >= N)
					continue;
				if (map[nx][ny] == 0) {
					map[nx][ny] = node.value;
					pq.offer(new Node(nx, ny, map[nx][ny], node.sec + 1));
				}
			}
		}

		System.out.println(map[X-1][Y-1]);

	}
}
